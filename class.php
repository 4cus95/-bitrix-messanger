<?use \Bitrix\Main\Localization\Loc;if (!defined('B_PROLOG_INCLUDED') || B_PROLOG_INCLUDED !== true) die();Loc::loadMessages(__FILE__);if (!CModule::IncludeModule('pull'))    return false;class MessengerComponent extends \CBitrixComponent implements \Bitrix\Main\Engine\Contract\Controllerable{    public function configureActions(){        return [];    }    //ajax params list    protected function listKeysSignedParameters() {        return [            'CHAT_ID'        ];    }    public function __construct($component = null) {        \CModule::IncludeModule('im');        parent::__construct($component);    }    public function onPrepareComponentParams($params) {        $params['CHAT_ID'] = (int)$params['CHAT_ID'];        return $params;    }    private function getChat() {        return new \CIMChat($this->arParams['CHAT_ID']);    }    public function executeComponent() {        global $USER;        \CPullWatch::Add($USER->GetId(), 'MY_MESSANGER');        $chat = $this->getChat();        $chatData = \CIMChat::GetChatData(array('ID'=> $this->arParams['CHAT_ID']));        // create new chat        if(!$chatData) {            $chat->Add(array(                'TITLE' => 'testChat',                'DESCRIPTION' => 'test chat descr',                'COLOR' => 'RED',                'TYPE' => IM_MESSAGE_OPEN,                'AUTHOR_ID' => '1'            ));        }        $this->arResult['USERS_IN_CHAT'] = $chatData['userInChat'][$this->arParams['CHAT_ID']];        //add user to the chat        if(!in_array($USER->GetID(), $this->arResult['USERS_IN_CHAT'])) {            $chat->AddUser($this->arParams['CHAT_ID'], $USER->GetID(), false, true, true);            $this->arResult['USERS_IN_CHAT'][] = $USER->GetID();        }        //get last 10 messages        $this->arResult['LAST_MESSAGES'] = $this->getLast10Mess();        if($USER->IsAuthorized()) {            $this->includeComponentTemplate();        } else {            $this->includeComponentTemplate('denied');        }    }    //output format    private function getMessageOutput($message) {        global $USER;        if(!(int)$message['READER_USER_ID']) {            $message['READER_USER_ID'] = $USER->GetID();        }        $output = '<div class="text">';        if($message['IM_MODEL_MESSAGE_QUESTION_MESSAGE']) {            $output .= '<div class="reply-mess-container"><div class="reply-on-message">'.$message['IM_MODEL_MESSAGE_QUESTION_MESSAGE'].'</div></div>';        }        if((int)$message['AUTHOR_ID']) {            $output .= Loc::getMessage('OUTPUT_USER', ['#USER_ID#' => $message['AUTHOR_ID']]);        }        if((int)$message['IM_MODEL_MESSAGE_FILE_PARAM_VALUE']) {            $strFilePath = \CFile::GetPath($message['IM_MODEL_MESSAGE_FILE_PARAM_VALUE']);            $output .= '<div class="message-text"><a download href="'.$strFilePath.'">'.Loc::getMessage('DOWNLOAD_FILE').'</a></div>';        } else {            $output .= '<div class="message-text">'.$message['MESSAGE'].'</div>';        }        $output .= '</div>';        if((int)$message['AUTHOR_ID'] == (int)$message['READER_USER_ID']) {            $output .= '<div class="edit" data-id="'.$message['ID'].'">'.Loc::getMessage('EDIT').'</div>';        }        $output .= '<div class="reply" data-id="'.$message['ID'].'">'.Loc::getMessage('REPLY').'</div>';        if((int)$message['AUTHOR_ID'] == (int)$message['READER_USER_ID']) {            $output .= '<div class="delete" data-id="'.$message['ID'].'">x</div>';        }        return $output;    }    //Common filter method    private function getMessagesFilter($arFilter, $limit = 20) {        $runtime = [            new \Bitrix\Main\Entity\ReferenceField(                'REPLY',                '\Bitrix\Im\Model\MessageParamTable',                [                    "=ref.MESSAGE_ID" => "this.ID",                    "ref.PARAM_NAME" => new \Bitrix\Main\DB\SqlExpression("?s", "REPLY")                ],                ["join_type" => "LEFT"]            ),            new \Bitrix\Main\Entity\ReferenceField(                'QUESTION',                '\Bitrix\Im\Model\MessageTable',                [                    "=ref.ID" => "this.REPLY.PARAM_VALUE"                ],                ["join_type" => "LEFT"]            ),            new \Bitrix\Main\Entity\ReferenceField(                'FILE',                '\Bitrix\Im\Model\MessageParamTable',                [                    "=ref.MESSAGE_ID" => "this.ID",                    "ref.PARAM_NAME" => new \Bitrix\Main\DB\SqlExpression("?s", "FILE_ID")                ],                ["join_type" => "LEFT"]            )        ];        $params = Array(            'select' => ['ID', 'AUTHOR_ID', 'MESSAGE', 'REPLY', 'QUESTION', 'FILE'],            'filter' => $arFilter,            'order' => Array('ID' => 'DESC'),            'runtime' => $runtime        );        if((int)$limit) {            $params['limit'] = $limit;        }        $arMessages = [];        $arRepliesIds = [];        $message_list = \Bitrix\Im\Model\MessageTable::getList($params);        while($message = $message_list->Fetch()) {            $message['OUTPUT_DATA'] = $this->getMessageOutput($message);            $arMessages[$message['ID']] = $message;        }        return array_reverse($arMessages);    }    private function getLast10Mess() {        $filter = [            "=CHAT_ID" => $this->arParams['CHAT_ID']        ];        return $this->getMessagesFilter($filter);    }    private function getMessagesFromId($id) {        $filter = [            "=CHAT_ID" => $this->arParams['CHAT_ID'],            ">=ID" => $id        ];        return $this->getMessagesFilter($filter, false);    }    //Add message to chat    public function addMessageToChatAction($message, $messageReplyTo = 0, $fileId = 0) {        global $USER;        $ar = Array(            "TO_CHAT_ID" => $this->arParams['CHAT_ID'],            "FROM_USER_ID" => $USER->GetID(),            "MESSAGE" => $message,        );        if((int)$messageReplyTo) {            $ar['PARAMS']['REPLY'] = $messageReplyTo;        }        if((int)$fileId) {            $ar['FILES'] = [$fileId];            $strPath = \CFile::GetPath($fileId);            $ar['MESSAGE'] = $strPath;        }        $newId = \CIMChat::AddMessage($ar);        $strMessageReplyTo = false;        if((int)$messageReplyTo) {            $arMessageReply = \Bitrix\Im\Model\MessageTable::getList([                'filter' => ['ID' => $messageReplyTo],                'select' => ['MESSAGE']            ])->fetch();            $strMessageReplyTo = $arMessageReply['MESSAGE'];        }        //Send messages to chat users, generating a different output for each one        $chatData = \CIMChat::GetChatData(array('ID'=> $this->arParams['CHAT_ID']));        foreach ($chatData['userInChat'][$this->arParams['CHAT_ID']] as $intUserId) {            \CPullStack::AddByUser($intUserId, Array(                'module_id' => 'my_messanger',                'command' => 'add_message',                'params' => [                    'OUTPUT_MESSAGE' => $this->getMessageOutput([                        'AUTHOR_ID' => $USER->GetID(),                        'MESSAGE' => $message,                        'ID' => $newId,                        'IM_MODEL_MESSAGE_QUESTION_MESSAGE' => $strMessageReplyTo,                        'IM_MODEL_MESSAGE_FILE_PARAM_VALUE' => $fileId,                        'READER_USER_ID' => $intUserId                    ]),                    'MESSAGE_ID' => $newId                ],            ));        }        return 'ok';    }    //Edit message to chat    public function editMessageAction($messageId, $message) {        if(!$this->isUserCreator($messageId)) {            return 'error';        }        global $USER;        \CIMMessenger::Update($messageId, $message, false, false, $USER->GetID());        CPullWatch::AddToStack('MY_MESSANGER',            Array(                'module_id' => 'my_messanger',                'command' => 'edit_message',                'params' => Array(                    'MESSAGE_ID' => $messageId,                    'OUTPUT_MESSAGE' => $message                )            )        );        return 'ok';    }    private function isUserCreator($messageId) {        if(!(int)$messageId) {            return false;        }        global $USER;        $arMessage = \Bitrix\Im\Model\MessageTable::getList([            'filter' => ['ID' => $messageId, 'AUTHOR_ID' => $USER->GetID()],        ])->fetch();        return $arMessage !== false;    }    public function deleteMessageAction($messageId) {        if(!$this->isUserCreator($messageId)) {            return 'error';        }        \Bitrix\Im\Model\MessageTable::delete($messageId);        CPullWatch::AddToStack('MY_MESSANGER',            Array(                'module_id' => 'my_messanger',                'command' => 'delete_message',                'params' => Array(                    'MESSAGE_ID' => $messageId                )            )        );        return 'ok';    }}